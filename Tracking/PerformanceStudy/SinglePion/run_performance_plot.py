
'''
Generate preTDR style single particle performance plot for tracking study.
Run after run_performance_study.py
Shujie Li, 10.2025

Note:
* both functions extract kinematic info from your rec file name, e.g. rec_defaul_0.5GeV_eta_-1_0_10000
* the uncertainties pacage is required for error propagation.  Install: 
pip install uncertainties

plot_eff(): plot eff v.s. mom for one setting generated by run_performance_study.py

plot_resol(): plot dp/p, theta, phi, DCAr resol v.s. mom (or pT) in five eta ranges [-3.5, -2.5, -1, 1, 2.5, 3.5]. dp/p and DCAr plots come with pwg requirement curves. 
* varname=th, ph, dp, dca
* can plot results from one or two settings
* IF each eta range are further binned in finner eta in resolution calculation, we need to combine for plotting


'''
    
import ast
import pandas as pd
import scipy
from scipy.signal import find_peaks
from uncertainties import unumpy as unp
import numpy as np
from matplotlib import pyplot as plt

plt.rcParams['figure.figsize'] = [8.0, 6.0]
plt.rcParams['ytick.direction'] = 'in'
plt.rcParams['xtick.direction'] = 'in'
plt.rcParams['xaxis.labellocation'] = 'right'
plt.rcParams['yaxis.labellocation'] = 'top'
SMALL_SIZE = 10
MEDIUM_SIZE = 12
BIGGER_SIZE = 16
plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=MEDIUM_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=MEDIUM_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=MEDIUM_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title]

deg2rad = np.pi/180.0
## convert theta to eta
def theta2eta(xx, inverse=0):
    xx = np.array(xx)
    if inverse==1:
        return np.arctan((np.e)**(-xx))*2
    else:
        return -np.log(np.tan(xx/2.))

## pwg requirement parameters are available for dp/p and DCAr
pwg = pd.read_csv('./pwg_requirements.txt',sep="\t",skiprows=1)
def pwg_value(varname, eta, mom):
    if varname=="dca" or varname=="dp":
        cond = (pwg.eta_lo <=eta)&(pwg.eta_hi>eta)
        a = pwg[varname+"_par1"].values[cond][0]
        b = pwg[varname+"_par2"].values[cond][0]
        x = mom
        if varname=="dca":
            x*=np.sin(theta2eta(eta,1))
            return np.sqrt((a/1000.0 / x)**2 + (b/1000.0)**2)
        elif varname=="dp":
            return np.sqrt((a * x)**2 + b**2)
    else:
        return -1*np.ones(len(mom))

    
def plot_eff(eff_file="eff_out.txt", dir_path="./", setting="default"):
    plt.figure()
    df= pd.read_csv(dir_path+eff_file,header=None,sep=";")
    mom_list=[0.5, 1, 2, 5, 10, 15]

    df.columns= ['tag', 'eff', 'err','eta_bins']
    ## select results from corresponding setting
    df = df[df['tag'].str.contains(setting, na=False)].reset_index()

    ## this depends on your actual customized file format
    ## here assumed rec_official_0.5GeV_eta_-1_0_10000
    df["mom_range"]=[ float(dd.split('GeV')[0].split('_')[-1])  for dd in df.tag]
    df["eta_lo"]=[ float(dd.split('eta_')[1].split('_')[0])  for dd in df.tag]
    df["eta_hi"]=[ float(dd.split('eta_')[1].split('_')[1])  for dd in df.tag]
    # df["deg_range"]=[ dd.split('eta_')[1].split('_')[0:1]  for dd in df.tag]
    # df["deg_range"]=[ dd.split('eta')[1].split(']_[')[0][1:]  for dd in df.tag]
    
    eta_bins=np.array(ast.literal_eval(df.eta_bins[0]))

    line_styles = [ (0, (3, 3, 1, 2)),  '--', '-.', ':','-',(0, (3, 1, 1, 1))]
    for ii,mom in enumerate(mom_list):
    # for ii,mom in enumerate(['0.5GeV', '1GeV', '2GeV', '5GeV', '10GeV', '15GeV']):
        cond = df.mom_range==mom
        dft  = df[cond]
        ys   = 0
        cnt  = 0
        for i in dft.index:
            row   = df.iloc[i]
            yy    = np.array(ast.literal_eval(row.eff))
            ee    = np.array(ast.literal_eval(row.err))
            cnt   += (yy != 0).astype(int)
            ys    += unp.uarray(yy,ee)
        cnt[cnt==0]=1 # set cnt to 1 when there's no non-zero values in that bin to avoid division error 0/0
        ys   = np.divide(ys,cnt)
        cond = eta_bins<10
        plt.plot(eta_bins[cond], unp.nominal_values(ys[cond]),ls=line_styles[ii],label=f"{mom} GeV")

    plt.legend(frameon=0, loc="upper left",ncol=2, fontsize=13)
    plt.ylim(0.,1.4)
    plt.xlim(-4,4)
    # plt.axvline(-1.5,c='grey')
    plt.xlabel("$\\eta$")
    plt.ylabel("efficiency")
    # plt.title(setting)
    plt.grid()
    plt.savefig(f"{dir_path}tracking_eff_{setting}.pdf")

# varname=th, ph, dp, dca
# setting2 is optional if you want to compare performance from two settings
def plot_resol(varname="ph",resol_file="resol_out_whole.txt", dir_path="./", setting1="", setting2=""):
    df= pd.read_csv(f'{dir_path}resol_out_whole.txt',header=None,sep=" ")

    df.columns = ["tag","sig_dp", "err_dp", "sig_th", "err_th", "sig_ph", "err_ph", "sig_dca", "err_dca"]
    # df = df.replace(-1,0)
    df["eta_lo"]=[ float(dd.split('eta_')[1].split('_')[0])  for dd in df.tag]
    df["eta_hi"]=[ float(dd.split('eta_')[1].split('_')[1])  for dd in df.tag]
    df["mom"]=[ float(dd.split('GeV')[0].split('_')[-1])  for dd in df.tag]
    df["name"]=["_".join(dd.split('GeV')[0].split('_')[1:-1]) for dd in df.tag]

    eta_lo_pwg = [-3.5,   -2.5,   -1,   1,    2.5  ]  
    eta_hi_pwg = [-2.5,   -1,   1,    2.5,    3.5  ]  
    xline      = np.arange(0,20,0.001)

    if varname  == "th":
        y_hi     = 0.01
        yname    = r"$\theta$ [rad]"
        xname    = "momentum [GeV]"
        x_hi      = [20,20,20,20,20]

    elif varname  == "ph":
        y_hi     = 0.01
        yname    = r"$\phi$ [rad]"
        xname    = "momentum [GeV]"
        x_hi      = [20,20,20,20,20]

    elif varname  == "dp":
        y_hi     = 3
        yname    = r"$\delta p/p$ [%]"
        xname    = "momentum [GeV]"
        x_hi      = [20,20,20,20,20]

    elif varname  ==  "dca":
        y_hi     = 1
        yname    = "DCA$_r$ [mm]"
        xname    = "pT [GeV]"
        x_hi     = [2,5,10,5,2]
    else:
        print("ERROR(plot_resol):please use a valid varname: th, ph, dp, dca")
        return -1

    fig,axs=plt.subplots(2,3,figsize=(12,9), dpi=100,sharex=0)
    axs = axs.flat
    ii=0
    for ii, e_lo in enumerate(eta_lo_pwg):
        e_hi = eta_hi_pwg[ii]
        ax   = axs[ii]
        if ii>1:
            ax   = axs[ii+1]

        # select rows within eta range,
        c1 = df.eta_lo>=e_lo
        c2 = df.eta_hi<=e_hi
        dft = df[c1&c2]
        if len(dft)==0:
            continue
        # take a quick average of all eta bins for plot: e.g. eta -1 to 0 are the average of -1,-0.5 and -0.5, 0
        dft = dft[['name','mom',"sig_"+varname,"err_"+varname]]
        dft = dft.groupby(['name','mom']).mean().reset_index()
        cond = (dft.name==setting1) & (dft["sig_"+varname]>0)
        
        if varname=="dca": ## p to pT
            xdata = dft.mom[cond]*np.sin(theta2eta((e_lo+e_hi)/2,1))
        else:
            xdata = dft.mom[cond]    
        ax.errorbar(xdata,dft["sig_"+varname][cond],yerr=dft["err_"+varname][cond],color="b",ls="none",marker="o")#,label=f"{e_lo} to {eta_hi_pwg[ii]}")
        
        if len(setting2)>0:    
            cond = (dft.name==setting2) & (dft["sig_"+varname]>0)
            if varname=="dca": ## p to pT
                xdata = dft.mom[cond]*np.sin(theta2eta((e_lo+e_hi)/2,1))
            else:
                xdata = dft.mom[cond]   
            ax.errorbar(xdata,dft["sig_"+varname][cond],yerr=dft["err_"+varname][cond],color="r",ls="none",marker="x")#,label=f"{e_lo} to {eta_hi_pwg[ii]}")
            

        ## PWG curve
        y_pwg=pwg_value(varname, e_lo, xline)
        if varname=="dca" or varname=="dp":
            ax.plot(xline, y_pwg, 'k--',zorder=10)
        ax.set_ylim(-y_hi*0.05,y_hi)
        ax.set_xlim(0,x_hi[ii]*1.05)
        ax.text(x_hi[ii]*0.1,y_hi*0.9, f"{e_lo}<$\\eta$<{e_hi}",fontsize=14)

    ## create legend on an empty sub-panel
    ax = axs[2]
    ax.axis('off')
    ax.plot(xline, y_pwg-100000, "k--",label="PWG Requirements")
    ax.errorbar(xline,y_pwg-100000,ls="none",marker="o",color="blue",label=setting1)#,label=f"{e_lo} to {eta_hi_pwg[ii]}")
    if len(setting2)>0:
        ax.errorbar(xline,y_pwg-100000,ls="none",marker="x",color="r",label=setting2)#,label=f"{e_lo} to {eta_hi_pwg[ii]}")
    ax.set_ylim(0,1)    
    ax.legend(frameon=0,loc="upper left",fontsize=16)

    axs[3].set_xlabel(xname)
    axs[3].set_ylabel(yname)

    plt.subplots_adjust(left=0.1, right=0.9, top=0.99, bottom=0.3)

    plt.savefig(f"{dir_path}tracking_single_resol_{varname}_eta.pdf")


if __name__ == "__main__":
    plot_resol(varname="ph",resol_file="resol_out_whole.txt", dir_path="./", setting1="official", setting2="")
    plot_eff(eff_file="eff_out.txt", dir_path="./", setting="default")
